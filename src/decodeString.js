const encodedstr="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"

const decodeHEX =(str)=>{
    try {
        const decodedString=Buffer.from(str ,'base64url').toString('utf8')
        console.log('hex decoded ', decodedString)
        return decodedString

    }catch(error){
        console.log(error.message)
    }
}
const tryDecodeBase64=(str)=>{
try{
    const decodedStr = Buffer.from(str,'base64').toString('utf8');
    console.log('base64' ,decodedStr)
    return decodedStr
}catch(error){
    console.log(error.message)
}
}
const translate =(value , lang)=>{

}

const hexDecoded = decodeHEX(encodedstr)
const base64Str = tryDecodeBase64(encodedstr)
